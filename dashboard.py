"""
Quantum Trading Dashboard with Settings and Trade Details
"""

import os
import json
import logging
import sqlite3
from datetime import datetime, timedelta
from flask import Flask, render_template_string, jsonify, request
from flask_cors import CORS
from functools import wraps
from dotenv import load_dotenv
import pyupbit
import yaml
import subprocess

# ÌôòÍ≤Ω Î≥ÄÏàò Î°úÎìú
load_dotenv()

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask Ïï±
app = Flask(__name__)
CORS(app)
app.config['SECRET_KEY'] = os.getenv('FLASK_SECRET_KEY', 'quantum-trading-secret')

# Redis Ïó∞Í≤∞ (ÏòµÏÖò)
try:
    import redis
    redis_client = redis.Redis(host='localhost', port=6379, decode_responses=True)
    redis_client.ping()
    logger.info("Redis connected for dashboard")
except:
    redis_client = None
    logger.warning("Redis not available for dashboard")

# ÎåÄÏãúÎ≥¥Îìú HTML ÌÖúÌîåÎ¶ø
DASHBOARD_HTML = """
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quantum Trading Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            color: #e2e8f0;
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        h1 {
            text-align: center;
            font-size: 2.5em;
            margin-bottom: 30px;
            background: linear-gradient(135deg, #4ade80 0%, #22d3ee 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .tab {
            padding: 10px 20px;
            background: rgba(255,255,255,0.1);
            border: none;
            border-radius: 5px;
            color: #94a3b8;
            cursor: pointer;
            transition: all 0.3s;
        }
        .tab.active {
            background: #4ade80;
            color: #000;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        .card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .card h2 {
            color: #4ade80;
            margin-bottom: 15px;
            font-size: 1.3em;
        }
        .metric {
            display: flex;
            justify-content: space-between;
            margin: 10px 0;
            padding: 8px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 5px;
        }
        .metric-label {
            font-weight: 500;
        }
        .metric-value {
            font-weight: bold;
        }
        .positive { color: #4ade80; }
        .negative { color: #f87171; }
        .neutral { color: #fbbf24; }
        .btn {
            padding: 10px 20px;
            margin: 5px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            transition: all 0.3s;
        }
        .btn-primary {
            background: #4ade80;
            color: #000;
        }
        .btn-danger {
            background: #f87171;
            color: #fff;
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 5px;
        }
        .status-running { background: #4ade80; }
        .status-stopped { background: #f87171; }
        .trade-list {
            max-height: 300px;
            overflow-y: auto;
        }
        .trade-item {
            padding: 10px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            cursor: pointer;
            transition: background 0.3s;
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 10px;
            font-size: 0.9em;
        }
        .trade-item:hover {
            background: rgba(255,255,255,0.05);
        }
        .trade-item.buy { border-left: 3px solid #4CAF50; }
        .trade-item.sell { border-left: 3px solid #f44336; }
        .trade-time { color: #94a3b8; }
        .trade-side { font-weight: bold; }
        .trade-side.buy { color: #4CAF50; }
        .trade-side.sell { color: #f44336; }
        .trade-price { color: #f59e0b; }
        .trade-signal { color: #8b5cf6; font-size: 0.85em; }
        .trade-pnl { font-weight: bold; }
        .trade-pnl.positive { color: #4CAF50; }
        .trade-pnl.negative { color: #f44336; }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
        }
        .modal-content {
            background: #1e293b;
            margin: 10% auto;
            padding: 30px;
            border-radius: 10px;
            width: 80%;
            max-width: 600px;
            border: 1px solid rgba(255,255,255,0.1);
        }
        .close {
            color: #94a3b8;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close:hover {
            color: #fff;
        }
        .setting-item {
            margin: 20px 0;
        }
        .setting-label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        .setting-input {
            width: 100%;
            padding: 10px;
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 5px;
            color: #fff;
            font-size: 1em;
        }
        .setting-description {
            font-size: 0.9em;
            color: #94a3b8;
            margin-top: 5px;
        }
        .log-content {
            background: #000;
            color: #0f0;
            padding: 15px;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            max-height: 500px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Quantum Trading Dashboard</h1>
        
        <!-- ÌÉ≠ Î≤ÑÌäº -->
        <div class="tabs">
            <button class="tab active" onclick="switchTab('dashboard', this)">ÎåÄÏãúÎ≥¥Îìú</button>
            <button class="tab" onclick="switchTab('settings', this)">ÏÑ§Ï†ï</button>
            <button class="tab" onclick="switchTab('logs', this)">Î°úÍ∑∏</button>
        </div>
        
        <!-- ÎåÄÏãúÎ≥¥Îìú ÌÉ≠ -->
        <div id="dashboard-tab" class="tab-content active">
            <div class="grid">
                <!-- ÏãúÏä§ÌÖú ÏÉÅÌÉú -->
                <div class="card">
                    <h2>ÏãúÏä§ÌÖú ÏÉÅÌÉú</h2>
                    <div class="metric">
                        <span class="metric-label">ÏÉÅÌÉú</span>
                        <span class="metric-value">
                            <span class="status-indicator" id="status-indicator"></span>
                            <span id="system-status">Loading...</span>
                        </span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Ïö¥ÏòÅ ÏãúÍ∞Ñ</span>
                        <span class="metric-value" id="uptime">-</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏</span>
                        <span class="metric-value" id="last-update">-</span>
                    </div>
                    <div style="margin-top: 15px;">
                        <button class="btn btn-primary" onclick="startTrading()">ÏãúÏûë</button>
                        <button class="btn btn-danger" onclick="stopTrading()">Ï§ëÏßÄ</button>
                    </div>
                </div>
                
                <!-- Í≥ÑÏ¢å Ï†ïÎ≥¥ -->
                <div class="card">
                    <h2>Í≥ÑÏ¢å Ï†ïÎ≥¥</h2>
                    <div class="metric">
                        <span class="metric-label">Ï¥ù ÏûêÏÇ∞</span>
                        <span class="metric-value" id="total-balance">‚Ç©0</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">KRW (ÏòàÏàòÍ∏à)</span>
                        <span class="metric-value" id="krw-balance">‚Ç©0</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">BTC Î≥¥Ïú†</span>
                        <span class="metric-value" id="btc-balance">0 BTC</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">BTC ÌèâÍ∞ÄÍ∏à</span>
                        <span class="metric-value" id="position-value">‚Ç©0</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">BTC ÏÜêÏùµ</span>
                        <span class="metric-value" id="btc-pnl">‚Ç©0</span>
                    </div>
                </div>
                
                <!-- Ïò§ÎäòÏùò ÏÑ±Í≥º -->
                <div class="card">
                    <h2>Ïò§ÎäòÏùò ÏÑ±Í≥º</h2>
                    <div class="metric">
                        <span class="metric-label">ÏùºÏùº ÏÜêÏùµ</span>
                        <span class="metric-value" id="daily-pnl">‚Ç©0</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Í±∞Îûò ÌöüÏàò</span>
                        <span class="metric-value">
                            <span id="trade-count">0</span>Ìöå
                            (<span id="buy-count">0</span>Îß§Ïàò/<span id="sell-count">0</span>Îß§ÎèÑ)
                        </span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">ÏäπÎ•†</span>
                        <span class="metric-value" id="win-rate">0%</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">ÌèâÍ∑† Ïã†Ìò∏ Í∞ïÎèÑ</span>
                        <span class="metric-value" id="avg-signal">0.000</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">ÌòÑÏû¨ ÏûÑÍ≥ÑÍ∞í</span>
                        <span class="metric-value" id="current-threshold">0.25</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Ïò§Îäò ÏµúÍ≥†/ÏµúÏ†ÄÍ∞Ä</span>
                        <span class="metric-value" id="price-range">-</span>
                    </div>
                </div>
                
                <!-- ÏµúÍ∑º Í±∞Îûò -->
                <div class="card">
                    <h2>ÏµúÍ∑º Í±∞Îûò</h2>
                    <div class="trade-list" id="recent-trades">
                        <div class="trade-item">Í±∞Îûò ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§</div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- ÏÑ§Ï†ï ÌÉ≠ -->
        <div id="settings-tab" class="tab-content">
            <div class="card">
                <h2>Í±∞Îûò ÏÑ§Ï†ï</h2>
                <div class="setting-item">
                    <label class="setting-label">Ïã†Ìò∏ ÏûÑÍ≥ÑÍ∞í (Signal Threshold)</label>
                    <input type="number" id="signal-threshold" class="setting-input" 
                           min="0.05" max="0.5" step="0.05" value="0.25">
                    <div class="setting-description">
                        Í±∞Îûò Ïã†Ìò∏ Í∞ïÎèÑ ÏûÑÍ≥ÑÍ∞í (0.05~0.5)<br>
                        ‚Ä¢ 0.05~0.15: Îß§Ïö∞ ÌôúÎ∞úÌïú Í±∞Îûò (Í≥†ÏúÑÌóò)<br>
                        ‚Ä¢ 0.20~0.30: Î≥¥ÌÜµ Í±∞Îûò ÎπàÎèÑ <strong>(Í∂åÏû•)</strong><br>
                        ‚Ä¢ 0.35~0.50: Î≥¥ÏàòÏ†Å Í±∞Îûò (Ï†ÄÏúÑÌóò)
                    </div>
                </div>
                <div class="setting-item">
                    <label class="setting-label">ÏµúÎåÄ Ìè¨ÏßÄÏÖò ÌÅ¨Í∏∞ (Max Position)</label>
                    <input type="number" id="max-position" class="setting-input" 
                           min="100000" max="10000000" step="100000" value="1000000">
                    <div class="setting-description">ÏµúÎåÄ Ìè¨ÏßÄÏÖò ÌÅ¨Í∏∞ (Ïõê)</div>
                </div>
                <div class="setting-item">
                    <label class="setting-label">Í±∞Îûò Í∞ÑÍ≤© (Trading Interval)</label>
                    <input type="number" id="trading-interval" class="setting-input" 
                           min="30" max="300" step="10" value="60">
                    <div class="setting-description">Í±∞Îûò Ïã†Ìò∏ ÏÉùÏÑ± Í∞ÑÍ≤© (Ï¥à)</div>
                </div>
                <div class="setting-item">
                    <label class="setting-label">ÏùºÏùº ÏÜêÏã§ ÌïúÎèÑ (Daily Loss Limit)</label>
                    <input type="number" id="daily-loss-limit" class="setting-input" 
                           min="1" max="10" step="0.5" value="5">
                    <div class="setting-description">ÏùºÏùº ÏµúÎåÄ ÏÜêÏã§ ÌïúÎèÑ (%)</div>
                </div>
                <button class="btn btn-primary" onclick="saveSettings()">ÏÑ§Ï†ï Ï†ÄÏû•</button>
                <button class="btn" onclick="loadSettings()">ÌòÑÏû¨ ÏÑ§Ï†ï Î∂àÎü¨Ïò§Í∏∞</button>
            </div>
            
            <!-- Ï†ÑÎûµÎ≥Ñ Í∞ÄÏ§ëÏπò ÏÑ§Ï†ï -->
            <div class="card" style="margin-top: 20px;">
                <h2>Ï†ÑÎûµÎ≥Ñ Í∞ÄÏ§ëÏπò ÏÑ§Ï†ï</h2>
                <div class="setting-description" style="margin-bottom: 20px;">
                    Ï†ÑÎûµÎ≥Ñ Í∞ÄÏ§ëÏπòÎ•º Ï°∞Ï†àÌïòÏó¨ Ïã†Ìò∏ Í∞ïÎèÑÎ•º Ï†úÏñ¥Ìï©ÎãàÎã§. (Ìï©Í≥Ñ: <span id="weight-total">100</span>%)
                </div>
                
                <div class="setting-item">
                    <label class="setting-label">Market Making (ÎßàÏºì Î©îÏù¥ÌÇπ)</label>
                    <input type="number" id="weight-market-making" class="setting-input" 
                           min="0" max="100" step="5" value="30" onchange="updateWeightTotal()">
                    <div class="setting-description">Ïä§ÌîÑÎ†àÎìú ÏàòÏùµ Ï†ÑÎûµ (Í∏∞Î≥∏: 30%)</div>
                </div>
                
                <div class="setting-item">
                    <label class="setting-label">Statistical Arbitrage (ÌÜµÍ≥ÑÏ†Å Ï∞®ÏùµÍ±∞Îûò)</label>
                    <input type="number" id="weight-stat-arb" class="setting-input" 
                           min="0" max="100" step="5" value="20" onchange="updateWeightTotal()">
                    <div class="setting-description">ÌéòÏñ¥ Ìä∏Î†àÏù¥Îî© Ï†ÑÎûµ (Í∏∞Î≥∏: 20%)</div>
                </div>
                
                <div class="setting-item">
                    <label class="setting-label">Microstructure (ÎßàÏù¥ÌÅ¨Î°úÍµ¨Ï°∞)</label>
                    <input type="number" id="weight-microstructure" class="setting-input" 
                           min="0" max="100" step="5" value="20" onchange="updateWeightTotal()">
                    <div class="setting-description">ÏãúÏû• ÎØ∏ÏãúÍµ¨Ï°∞ Î∂ÑÏÑù (Í∏∞Î≥∏: 20%)</div>
                </div>
                
                <div class="setting-item">
                    <label class="setting-label">Momentum Scalping (Î™®Î©òÌÖÄ Ïä§Ï∫òÌïë)</label>
                    <input type="number" id="weight-momentum" class="setting-input" 
                           min="0" max="100" step="5" value="15" onchange="updateWeightTotal()">
                    <div class="setting-description">Îã®Í∏∞ Î™®Î©òÌÖÄ Ìè¨Ï∞© (Í∏∞Î≥∏: 15%)</div>
                </div>
                
                <div class="setting-item">
                    <label class="setting-label">Mean Reversion (ÌèâÍ∑† ÌöåÍ∑Ä)</label>
                    <input type="number" id="weight-mean-reversion" class="setting-input" 
                           min="0" max="100" step="5" value="15" onchange="updateWeightTotal()">
                    <div class="setting-description">Í≥ºÎß§Ïàò/Í≥ºÎß§ÎèÑ Ìè¨Ï∞© (Í∏∞Î≥∏: 15%)</div>
                </div>
                
                <div class="setting-item" style="margin-top: 15px; padding-top: 15px; border-top: 1px solid rgba(255,255,255,0.1);">
                    <div class="setting-description">
                        <strong>ÌåÅ:</strong> Í∞ÄÏ§ëÏπò Ìï©Í≥ÑÎäî 100%Í∞Ä ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.<br>
                        ‚Ä¢ Ïã†Ìò∏Í∞Ä ÏïΩÌïòÎã§Î©¥ Ï£ºÏöî Ï†ÑÎûµÏùò Í∞ÄÏ§ëÏπòÎ•º ÎÜíÏù¥ÏÑ∏Ïöî<br>
                        ‚Ä¢ ÌäπÏ†ï Ï†ÑÎûµÏù¥ Ïûò ÏûëÎèôÌïúÎã§Î©¥ Ìï¥Îãπ Í∞ÄÏ§ëÏπòÎ•º Ï¶ùÍ∞ÄÏãúÌÇ§ÏÑ∏Ïöî
                    </div>
                </div>
                
                <button class="btn btn-primary" onclick="saveStrategyWeights()">Í∞ÄÏ§ëÏπò Ï†ÄÏû•</button>
                <button class="btn" onclick="loadStrategyWeights()">ÌòÑÏû¨ Í∞ÄÏ§ëÏπò Î∂àÎü¨Ïò§Í∏∞</button>
            </div>
        </div>
        
        <!-- Î°úÍ∑∏ ÌÉ≠ -->
        <div id="logs-tab" class="tab-content">
            <div class="card">
                <h2>ÏãúÏä§ÌÖú Î°úÍ∑∏</h2>
                <div class="log-content" id="log-content">
                    Loading logs...
                </div>
                <button class="btn" onclick="loadLogs()">Î°úÍ∑∏ ÏÉàÎ°úÍ≥†Ïπ®</button>
            </div>
        </div>
    </div>
    
    <!-- Í±∞Îûò ÏÉÅÏÑ∏ Î™®Îã¨ -->
    <div id="tradeModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Í±∞Îûò ÏÉÅÏÑ∏ Ï†ïÎ≥¥</h2>
            <div id="trade-details"></div>
        </div>
    </div>
    
    <script>
        // ÌÉ≠ Ï†ÑÌôò
        function switchTab(tabName, element) {
            // Î™®Îì† ÌÉ≠ ÎπÑÌôúÏÑ±Ìôî
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // ÏÑ†ÌÉùÌïú ÌÉ≠ ÌôúÏÑ±Ìôî
            element.classList.add('active');
            document.getElementById(tabName + '-tab').classList.add('active');
            
            // Î°úÍ∑∏ ÌÉ≠Ïù¥Î©¥ Î°úÍ∑∏ Î°úÎìú
            if (tabName === 'logs') {
                loadLogs();
            } else if (tabName === 'settings') {
                loadSettings();
            }
        }
        
        // Î™®Îã¨ Îã´Í∏∞
        function closeModal() {
            document.getElementById('tradeModal').style.display = 'none';
        }
        
        // Í±∞Îûò ÏÉÅÏÑ∏ Î≥¥Í∏∞
        function showTradeDetails(trade) {
            const modal = document.getElementById('tradeModal');
            const details = document.getElementById('trade-details');
            
            const sideClass = trade.side === 'BUY' ? 'buy' : 'sell';
            const pnlClass = trade.pnl >= 0 ? 'positive' : 'negative';
            
            details.innerHTML = `
                <div class="metric">
                    <span class="metric-label">Í±∞Îûò ÏãúÍ∞Ñ:</span>
                    <span class="metric-value">${new Date(trade.timestamp).toLocaleString()}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Í±∞Îûò Î∞©Ìñ•:</span>
                    <span class="metric-value" style="color: ${trade.side === 'BUY' ? '#4CAF50' : '#f44336'}; font-weight: bold;">
                        ${trade.side || trade.action || 'N/A'}
                    </span>
                </div>
                <div class="metric">
                    <span class="metric-label">Í±∞Îûò Í∞ÄÍ≤©:</span>
                    <span class="metric-value">‚Ç©${Math.floor(trade.price || 0).toLocaleString()}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Í±∞Îûò ÏàòÎüâ:</span>
                    <span class="metric-value">${((trade.quantity || trade.amount || 0) / (trade.price || 1)).toFixed(8)} BTC</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Í±∞Îûò Í∏àÏï°:</span>
                    <span class="metric-value">‚Ç©${Math.floor(trade.quantity || trade.amount || 0).toLocaleString()}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Ï†ÑÎûµ:</span>
                    <span class="metric-value">${trade.strategy || 'ensemble'}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Ïã†Ìò∏ Í∞ïÎèÑ:</span>
                    <span class="metric-value">${(trade.signal_strength || 0).toFixed(3)}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Í±∞Îûò Í∑ºÍ±∞:</span>
                    <span class="metric-value" style="font-size: 0.9em;">${trade.reason || 'N/A'}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">ÏÜêÏùµ:</span>
                    <span class="metric-value" style="color: ${trade.pnl >= 0 ? '#4CAF50' : '#f44336'}; font-weight: bold;">
                        ‚Ç©${Math.floor(trade.pnl || 0).toLocaleString()}
                    </span>
                </div>
            `;
            
            modal.style.display = 'block';
        }
        
        // ÏÑ§Ï†ï Ï†ÄÏû•
        async function saveSettings() {
            const settings = {
                signal_threshold: parseFloat(document.getElementById('signal-threshold').value),
                max_position: parseInt(document.getElementById('max-position').value),
                trading_interval: parseInt(document.getElementById('trading-interval').value),
                daily_loss_limit: parseFloat(document.getElementById('daily-loss-limit').value)
            };
            
            try {
                const response = await fetch('/api/settings', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(settings)
                });
                
                if (response.ok) {
                    alert('ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§. ÏãúÏä§ÌÖúÏùÑ Ïû¨ÏãúÏûëÌïòÏÑ∏Ïöî.');
                } else {
                    alert('ÏÑ§Ï†ï Ï†ÄÏû• Ïã§Ìå®');
                }
            } catch (error) {
                alert('Error: ' + error);
            }
        }
        
        // ÏÑ§Ï†ï Î∂àÎü¨Ïò§Í∏∞
        async function loadSettings() {
            try {
                const response = await fetch('/api/settings');
                const settings = await response.json();
                
                document.getElementById('signal-threshold').value = settings.signal_threshold || 0.25;
                document.getElementById('max-position').value = settings.max_position || 1000000;
                document.getElementById('trading-interval').value = settings.trading_interval || 60;
                document.getElementById('daily-loss-limit').value = settings.daily_loss_limit || 5;
            } catch (error) {
                console.error('Error loading settings:', error);
            }
        }
        
        // Í∞ÄÏ§ëÏπò Ìï©Í≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        function updateWeightTotal() {
            const weights = [
                'weight-market-making',
                'weight-stat-arb', 
                'weight-microstructure',
                'weight-momentum',
                'weight-mean-reversion'
            ];
            
            let total = 0;
            weights.forEach(id => {
                total += parseFloat(document.getElementById(id).value) || 0;
            });
            
            document.getElementById('weight-total').textContent = total;
            
            // Ìï©Í≥ÑÍ∞Ä 100Ïù¥ ÏïÑÎãàÎ©¥ Í≤ΩÍ≥† ÏÉâÏÉÅ
            const totalElement = document.getElementById('weight-total');
            if (Math.abs(total - 100) < 0.01) {
                totalElement.style.color = '#4ade80';
            } else {
                totalElement.style.color = '#f87171';
            }
        }
        
        // Ï†ÑÎûµ Í∞ÄÏ§ëÏπò Ï†ÄÏû•
        async function saveStrategyWeights() {
            const weights = {
                market_making: parseFloat(document.getElementById('weight-market-making').value) / 100,
                stat_arb: parseFloat(document.getElementById('weight-stat-arb').value) / 100,
                microstructure: parseFloat(document.getElementById('weight-microstructure').value) / 100,
                momentum_scalping: parseFloat(document.getElementById('weight-momentum').value) / 100,
                mean_reversion: parseFloat(document.getElementById('weight-mean-reversion').value) / 100
            };
            
            // Ìï©Í≥Ñ Í≤ÄÏ¶ù
            const total = Object.values(weights).reduce((a, b) => a + b, 0);
            if (Math.abs(total - 1.0) > 0.01) {
                alert('Í∞ÄÏ§ëÏπò Ìï©Í≥ÑÎäî 100%Í∞Ä ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§. ÌòÑÏû¨: ' + (total * 100).toFixed(0) + '%');
                return;
            }
            
            try {
                const response = await fetch('/api/strategy-weights', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(weights)
                });
                
                if (response.ok) {
                    alert('Ï†ÑÎûµ Í∞ÄÏ§ëÏπòÍ∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§. ÏãúÏä§ÌÖúÏùÑ Ïû¨ÏãúÏûëÌïòÏÑ∏Ïöî.');
                } else {
                    alert('Í∞ÄÏ§ëÏπò Ï†ÄÏû• Ïã§Ìå®');
                }
            } catch (error) {
                alert('Error: ' + error);
            }
        }
        
        // Ï†ÑÎûµ Í∞ÄÏ§ëÏπò Î∂àÎü¨Ïò§Í∏∞
        async function loadStrategyWeights() {
            try {
                const response = await fetch('/api/strategy-weights');
                const weights = await response.json();
                
                document.getElementById('weight-market-making').value = (weights.market_making || 0.30) * 100;
                document.getElementById('weight-stat-arb').value = (weights.stat_arb || 0.20) * 100;
                document.getElementById('weight-microstructure').value = (weights.microstructure || 0.20) * 100;
                document.getElementById('weight-momentum').value = (weights.momentum_scalping || 0.15) * 100;
                document.getElementById('weight-mean-reversion').value = (weights.mean_reversion || 0.15) * 100;
                
                updateWeightTotal();
            } catch (error) {
                console.error('Error loading strategy weights:', error);
            }
        }
        
        // Î°úÍ∑∏ Î°úÎìú
        async function loadLogs() {
            try {
                const response = await fetch('/api/logs');
                const data = await response.json();
                document.getElementById('log-content').innerHTML = 
                    '<pre>' + (data.logs || 'No logs available').replace(/\\n/g, '<br>') + '</pre>';
            } catch (error) {
                document.getElementById('log-content').textContent = 'Error loading logs';
            }
        }
        
        // Í±∞Îûò ÏãúÏûë
        async function startTrading() {
            if (confirm('Í±∞ÎûòÎ•º ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                try {
                    const response = await fetch('/api/control', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({action: 'start'})
                    });
                    const data = await response.json();
                    alert(data.message || 'Trading started');
                } catch (error) {
                    alert('Error: ' + error);
                }
            }
        }
        
        // Í±∞Îûò Ï§ëÏßÄ
        async function stopTrading() {
            if (confirm('Ï†ïÎßêÎ°ú Í±∞ÎûòÎ•º Ï§ëÏßÄÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                try {
                    const response = await fetch('/api/control', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({action: 'stop'})
                    });
                    const data = await response.json();
                    alert(data.message || 'Trading stopped');
                } catch (error) {
                    alert('Error: ' + error);
                }
            }
        }
        
        // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        async function updateStatus() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();
                
                // ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
                document.getElementById('system-status').textContent = data.system_status || 'Unknown';
                document.getElementById('last-update').textContent = new Date().toLocaleTimeString();
                
                // ÏÉÅÌÉú Ïù∏ÎîîÏºÄÏù¥ÌÑ∞
                const indicator = document.getElementById('status-indicator');
                indicator.className = 'status-indicator status-' + 
                    (data.system_status === 'Running' ? 'running' : 'stopped');
                
                // Í≥ÑÏ¢å Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
                document.getElementById('total-balance').textContent = 
                    '‚Ç©' + Math.floor(data.total_balance || 0).toLocaleString();
                document.getElementById('krw-balance').textContent = 
                    '‚Ç©' + Math.floor(data.krw_balance || 0).toLocaleString();
                document.getElementById('btc-balance').textContent = 
                    (data.btc_balance || 0).toFixed(8) + ' BTC';
                document.getElementById('position-value').textContent = 
                    '‚Ç©' + Math.floor(data.position_value || 0).toLocaleString();
                    
                // BTC ÏÜêÏùµ
                if (data.btc_pnl) {
                    const pnlElement = document.getElementById('btc-pnl');
                    pnlElement.textContent = '‚Ç©' + Math.floor(data.btc_pnl).toLocaleString();
                    pnlElement.className = data.btc_pnl >= 0 ? 'positive' : 'negative';
                }
                
                // ÏÑ±Í≥º ÏóÖÎç∞Ïù¥Ìä∏
                const pnlElement = document.getElementById('daily-pnl');
                const pnl = data.daily_pnl || 0;
                pnlElement.textContent = '‚Ç©' + Math.floor(pnl).toLocaleString();
                pnlElement.className = pnl >= 0 ? 'positive' : 'negative';
                
                document.getElementById('trade-count').textContent = data.trade_count || '0';
                document.getElementById('buy-count').textContent = data.buy_count || '0';
                document.getElementById('sell-count').textContent = data.sell_count || '0';
                document.getElementById('win-rate').textContent = 
                    (data.win_rate || 0).toFixed(1) + '%';
                document.getElementById('avg-signal').textContent = 
                    (data.avg_signal_strength || 0).toFixed(3);
                document.getElementById('current-threshold').textContent = 
                    (data.current_threshold || 0.25).toFixed(2);
                
                // Í∞ÄÍ≤© Î≤îÏúÑ ÌëúÏãú
                if (data.min_price && data.max_price) {
                    document.getElementById('price-range').textContent = 
                        `‚Ç©${Math.floor(data.min_price).toLocaleString()} ~ ‚Ç©${Math.floor(data.max_price).toLocaleString()}`;
                }
                
                // ÏµúÍ∑º Í±∞Îûò
                if (data.recent_trades && data.recent_trades.length > 0) {
                    const tradesHtml = data.recent_trades.map(trade => {
                        const sideClass = trade.side === 'BUY' ? 'buy' : 'sell';
                        const pnlClass = trade.pnl >= 0 ? 'positive' : 'negative';
                        return `
                            <div class="trade-item ${sideClass}" onclick='showTradeDetails(${JSON.stringify(trade).replace(/'/g, "&apos;")})' style="cursor: pointer;">
                                <span class="trade-time">${new Date(trade.timestamp).toLocaleTimeString()}</span>
                                <span class="trade-side ${sideClass}">${trade.side}</span>
                                <span class="trade-price">‚Ç©${Math.floor(trade.price).toLocaleString()}</span>
                                <span class="trade-signal">Ïã†Ìò∏: ${(trade.signal_strength || 0).toFixed(3)}</span>
                                ${trade.pnl !== 0 ? `<span class="trade-pnl ${pnlClass}">‚Ç©${Math.floor(trade.pnl).toLocaleString()}</span>` : ''}
                            </div>
                        `;
                    }).join('');
                    document.getElementById('recent-trades').innerHTML = tradesHtml;
                } else {
                    document.getElementById('recent-trades').innerHTML = '<div class="trade-item">Í±∞Îûò ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§</div>';
                }
                
            } catch (error) {
                console.error('Error updating status:', error);
            }
        }
        
        // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî
        window.onload = function() {
            updateStatus();
            loadSettings();
            loadStrategyWeights();
            setInterval(updateStatus, 5000);  // 5Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
        };
        
        // Î™®Îã¨ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
        window.onclick = function(event) {
            const modal = document.getElementById('tradeModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }
    </script>
</body>
</html>
"""

@app.route('/')
def dashboard():
    """Î©îÏù∏ ÎåÄÏãúÎ≥¥Îìú"""
    return render_template_string(DASHBOARD_HTML)

@app.route('/api/status')
def get_status():
    """ÏãúÏä§ÌÖú ÏÉÅÌÉú API"""
    try:
        # ÌîÑÎ°úÏÑ∏Ïä§ Ïã§Ìñâ ÏÉÅÌÉú ÌôïÏù∏
        result = os.popen("ps aux | grep 'quantum_trading.py' | grep -v grep").read()
        is_running = bool(result.strip())
        
        status = {
            'system_status': 'Running' if is_running else 'Stopped',
            'timestamp': datetime.now().isoformat(),
            'is_running': is_running
        }
        
        # ÏÑ§Ï†ï ÌååÏùºÏóêÏÑú ÌòÑÏû¨ ÏûÑÍ≥ÑÍ∞í ÏùΩÍ∏∞
        try:
            with open('config/config.yaml', 'r') as f:
                config = yaml.safe_load(f)
                status['current_threshold'] = config.get('trading', {}).get('signal_threshold', 0.25)
        except:
            status['current_threshold'] = 0.25
        
        # Upbit ÏûîÍ≥† Ï°∞Ìöå
        try:
            upbit = pyupbit.Upbit(
                os.getenv('UPBIT_ACCESS_KEY'),
                os.getenv('UPBIT_SECRET_KEY')
            )
            balances = upbit.get_balances()
            
            krw_balance = 0
            btc_balance = 0
            btc_avg_price = 0
            position_value = 0
            
            for b in balances:
                currency = b['currency']
                balance = float(b['balance'])
                
                if currency == 'KRW':
                    krw_balance = balance
                elif currency == 'BTC' and balance > 0:
                    btc_balance = balance
                    btc_avg_price = float(b['avg_buy_price'])
                    # BTC ÌòÑÏû¨Í∞Ä Ï°∞Ìöå
                    try:
                        current_btc_price = pyupbit.get_current_price('KRW-BTC')
                        if current_btc_price:
                            position_value = btc_balance * current_btc_price
                            status['btc_current_price'] = current_btc_price
                            status['btc_pnl'] = position_value - (btc_balance * btc_avg_price)
                            status['btc_pnl_percent'] = ((current_btc_price - btc_avg_price) / btc_avg_price * 100) if btc_avg_price > 0 else 0
                    except:
                        position_value = btc_balance * btc_avg_price
            
            status['krw_balance'] = krw_balance
            status['btc_balance'] = btc_balance
            status['btc_avg_price'] = btc_avg_price
            status['position_value'] = position_value
            status['total_balance'] = krw_balance + position_value
            status['available_balance'] = krw_balance
            
        except Exception as e:
            logger.error(f"Error getting balances: {e}")
            status['total_balance'] = 0
            status['krw_balance'] = 0
            status['btc_balance'] = 0
        
        # Í±∞Îûò ÌÜµÍ≥Ñ
        try:
            conn = sqlite3.connect('data/quantum.db')
            cursor = conn.cursor()
            
            # Ïò§ÎäòÏùò Í±∞Îûò ÏÉÅÏÑ∏ ÌÜµÍ≥Ñ
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_trades,
                    COUNT(CASE WHEN side = 'BUY' THEN 1 END) as buy_count,
                    COUNT(CASE WHEN side = 'SELL' THEN 1 END) as sell_count,
                    SUM(pnl) as total_pnl,
                    MIN(price) as min_price,
                    MAX(price) as max_price,
                    AVG(price) as avg_price
                FROM trades 
                WHERE DATE(timestamp) = ?
            """, (today,))
            
            stats = cursor.fetchone()
            trade_count = stats[0] or 0
            buy_count = stats[1] or 0
            sell_count = stats[2] or 0
            daily_pnl = stats[3] or 0
            min_price = stats[4] or 0
            max_price = stats[5] or 0
            avg_price = stats[6] or 0
            
            status['trade_count'] = trade_count
            status['buy_count'] = buy_count
            status['sell_count'] = sell_count
            status['daily_pnl'] = daily_pnl
            status['min_price'] = min_price
            status['max_price'] = max_price
            status['avg_price'] = avg_price
            
            # ÏäπÎ•† Í≥ÑÏÇ∞
            cursor.execute("""
                SELECT COUNT(*) FROM trades 
                WHERE DATE(timestamp) = ? AND pnl > 0
            """, (today,))
            
            win_count = cursor.fetchone()[0] or 0
            status['win_rate'] = (win_count / trade_count * 100) if trade_count > 0 else 0
            
            # ÌèâÍ∑† Ïã†Ìò∏ Í∞ïÎèÑ (signals ÌÖåÏù¥Î∏îÏóêÏÑú)
            cursor.execute("""
                SELECT AVG(strength) 
                FROM signals 
                WHERE DATE(timestamp) = ?
            """, (today,))
            
            avg_signal = cursor.fetchone()[0] or 0
            status['avg_signal_strength'] = avg_signal
            
            # ÏµúÍ∑º Í±∞Îûò (Ïã†Ìò∏ Ï†ïÎ≥¥ÏôÄ Ìï®Íªò)
            cursor.execute("""
                SELECT 
                    t.timestamp,
                    t.side,
                    t.price,
                    t.quantity,
                    t.pnl,
                    t.strategy_name,
                    s.strength,
                    s.reason
                FROM trades t
                LEFT JOIN signals s ON 
                    s.timestamp BETWEEN datetime(t.timestamp, '-5 seconds') 
                    AND datetime(t.timestamp, '+5 seconds')
                    AND s.action = t.side
                ORDER BY t.timestamp DESC 
                LIMIT 10
            """)
            
            trades = cursor.fetchall()
            status['recent_trades'] = []
            for trade in trades:
                status['recent_trades'].append({
                    'timestamp': trade[0],
                    'side': trade[1],
                    'price': trade[2],
                    'quantity': trade[3],
                    'pnl': trade[4] or 0,
                    'strategy': trade[5],
                    'signal_strength': trade[6] or 0,
                    'reason': trade[7] or 'N/A'
                })
            
            conn.close()
            
        except Exception as e:
            logger.error(f"Error getting trade data: {e}")
            status['trade_count'] = 0
            status['daily_pnl'] = 0
            status['win_rate'] = 0
            status['recent_trades'] = []
        
        return jsonify(status)
        
    except Exception as e:
        logger.error(f"Error in get_status: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/control', methods=['POST'])
def control():
    """ÏãúÏä§ÌÖú Ï†úÏñ¥ API"""
    try:
        data = request.json
        action = data.get('action')
        
        if action == 'start':
            # Í±∞Îûò ÏãúÏûë - ÌîÑÎ°úÏÑ∏Ïä§ ÏßÅÏ†ë Ïã§Ìñâ
            # Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏
            result = os.popen("ps aux | grep 'quantum_trading.py' | grep -v grep").read()
            if result:
                return jsonify({'status': 'warning', 'message': 'Trading already running'})
            
            # ÏÉàÎ°ú ÏãúÏûë
            subprocess.Popen(
                ['bash', '-c', 'cd /opt/bit_auto_v2_250712 && source venv/bin/activate && nohup python3 quantum_trading.py > logs/quantum_trading.log 2>&1 &'],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            
            return jsonify({'status': 'success', 'message': 'Trading started'})
            
        elif action == 'stop':
            # Í±∞Îûò Ï§ëÏßÄ - ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å
            os.system("pkill -f 'quantum_trading.py'")
            
            return jsonify({'status': 'success', 'message': 'Trading stopped'})
            
        elif action == 'restart':
            # Ïû¨ÏãúÏûë
            os.system("pkill -f 'quantum_trading.py'")
            os.system('sleep 2')
            subprocess.Popen(
                ['bash', '-c', 'cd /opt/bit_auto_v2_250712 && source venv/bin/activate && nohup python3 quantum_trading.py > logs/quantum_trading.log 2>&1 &'],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            
            return jsonify({'status': 'success', 'message': 'Trading restarted'})
            
        else:
            return jsonify({'error': 'Unknown action'}), 400
            
    except Exception as e:
        logger.error(f"Error in control: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/settings', methods=['GET', 'POST'])
def settings():
    """ÏÑ§Ï†ï Í¥ÄÎ¶¨ API"""
    config_path = 'config/config.yaml'
    
    if request.method == 'GET':
        try:
            with open(config_path, 'r') as f:
                config = yaml.safe_load(f)
                
            return jsonify({
                'signal_threshold': config.get('trading', {}).get('signal_threshold', 0.25),
                'max_position': config.get('trading', {}).get('limits', {}).get('max_position', 1000000),
                'trading_interval': config.get('trading', {}).get('interval', 60),
                'daily_loss_limit': config.get('risk', {}).get('limits', {}).get('max_daily_loss_percent', 5.0)
            })
        except Exception as e:
            logger.error(f"Error loading settings: {e}")
            return jsonify({'error': str(e)}), 500
    
    else:  # POST
        try:
            data = request.json
            
            # ÌòÑÏû¨ ÏÑ§Ï†ï Î°úÎìú
            with open(config_path, 'r') as f:
                config = yaml.safe_load(f)
            
            # ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
            if 'signal_threshold' in data:
                config['trading']['signal_threshold'] = data['signal_threshold']
            if 'max_position' in data:
                config['trading']['limits']['max_position'] = data['max_position']
            if 'trading_interval' in data:
                config['trading']['interval'] = data['trading_interval']
            if 'daily_loss_limit' in data:
                config['risk']['limits']['max_daily_loss_percent'] = data['daily_loss_limit']
            
            # ÏÑ§Ï†ï Ï†ÄÏû•
            with open(config_path, 'w') as f:
                yaml.dump(config, f, default_flow_style=False)
            
            return jsonify({'status': 'success', 'message': 'Settings saved'})
            
        except Exception as e:
            logger.error(f"Error saving settings: {e}")
            return jsonify({'error': str(e)}), 500

@app.route('/api/trades')
def get_trades():
    """Í±∞Îûò ÎÇ¥Ïó≠ Ï°∞Ìöå API (ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ìè¨Ìï®)"""
    try:
        conn = sqlite3.connect('data/quantum.db')
        cursor = conn.cursor()
        
        # Í±∞Îûò ÎÇ¥Ïó≠Í≥º Ïã†Ìò∏ Ï†ïÎ≥¥ Ï°∞Ïù∏
        cursor.execute('''
            SELECT 
                t.id,
                t.timestamp,
                t.strategy_name,
                t.symbol,
                t.side,
                t.price,
                t.quantity,
                t.fee,
                t.pnl,
                s.strength,
                s.reason
            FROM trades t
            LEFT JOIN signals s ON 
                s.timestamp BETWEEN datetime(t.timestamp, '-5 seconds') 
                AND datetime(t.timestamp, '+5 seconds')
                AND s.action = t.side
            ORDER BY t.timestamp DESC
            LIMIT 50
        ''')
        
        trades = []
        for row in cursor.fetchall():
            trades.append({
                'id': row[0],
                'timestamp': row[1],
                'strategy': row[2],
                'symbol': row[3],
                'side': row[4],
                'price': row[5],
                'quantity': row[6],
                'fee': row[7] or 0,
                'pnl': row[8] or 0,
                'signal_strength': row[9] or 0,
                'reason': row[10] or 'N/A'
            })
        
        conn.close()
        return jsonify({'trades': trades})
    except Exception as e:
        logger.error(f"Error fetching trades: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/strategy-weights', methods=['GET', 'POST'])
def strategy_weights():
    """Ï†ÑÎûµÎ≥Ñ Í∞ÄÏ§ëÏπò Í¥ÄÎ¶¨ API"""
    config_file = 'config/config.yaml'
    
    if request.method == 'GET':
        try:
            with open(config_file, 'r') as f:
                config = yaml.safe_load(f)
            
            weights = {
                'market_making': config.get('strategies', {}).get('market_making', {}).get('weight', 0.30),
                'stat_arb': config.get('strategies', {}).get('statistical_arbitrage', {}).get('weight', 0.20),
                'microstructure': config.get('strategies', {}).get('microstructure', {}).get('weight', 0.20),
                'momentum_scalping': config.get('strategies', {}).get('momentum_scalping', {}).get('weight', 0.15),
                'mean_reversion': config.get('strategies', {}).get('mean_reversion', {}).get('weight', 0.15)
            }
            
            return jsonify(weights)
        except Exception as e:
            logger.error(f"Error loading strategy weights: {e}")
            return jsonify({'error': str(e)}), 500
    
    elif request.method == 'POST':
        try:
            weights = request.json
            
            # config ÌååÏùº ÏùΩÍ∏∞
            with open(config_file, 'r') as f:
                config = yaml.safe_load(f)
            
            # Í∞ÄÏ§ëÏπò ÏóÖÎç∞Ïù¥Ìä∏
            if 'strategies' not in config:
                config['strategies'] = {}
            
            config['strategies']['market_making']['weight'] = weights['market_making']
            config['strategies']['statistical_arbitrage']['weight'] = weights['stat_arb']
            config['strategies']['microstructure']['weight'] = weights['microstructure']
            config['strategies']['momentum_scalping']['weight'] = weights['momentum_scalping']
            config['strategies']['mean_reversion']['weight'] = weights['mean_reversion']
            
            # ÌååÏùº Ï†ÄÏû•
            with open(config_file, 'w') as f:
                yaml.dump(config, f, default_flow_style=False, sort_keys=False)
            
            logger.info(f"Strategy weights updated: {weights}")
            return jsonify({'status': 'success', 'message': 'Strategy weights saved'})
            
        except Exception as e:
            logger.error(f"Error saving strategy weights: {e}")
            return jsonify({'error': str(e)}), 500

@app.route('/api/logs')
def get_logs():
    """Î°úÍ∑∏ Ï°∞Ìöå API"""
    try:
        log_path = 'logs/quantum_trading.log'
        if os.path.exists(log_path):
            # ÎßàÏßÄÎßâ 100Ï§ÑÎßå ÏùΩÍ∏∞
            with open(log_path, 'r') as f:
                lines = f.readlines()
                recent_logs = ''.join(lines[-100:])
                return jsonify({'logs': recent_logs})
        else:
            return jsonify({'logs': 'Log file not found'})
    except Exception as e:
        logger.error(f"Error reading logs: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health():
    """Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏"""
    return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()})

if __name__ == '__main__':
    port = int(os.getenv('DASHBOARD_PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=False)