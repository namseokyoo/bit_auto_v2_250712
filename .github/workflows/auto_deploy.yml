name: Auto Deploy to Oracle Cloud

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyupbit pandas numpy redis apscheduler httpx psutil pyyaml flask flask-cors python-dotenv
    
    - name: Basic syntax check
      run: |
        python -m py_compile quantum_trading.py
        python -m py_compile multi_coin_trading.py
        python -m py_compile dashboard.py
        python -m py_compile integrated_trading_system.py
    
    - name: System test
      run: |
        python test_system.py || true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Oracle Server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.ORACLE_HOST }}
        username: ${{ secrets.ORACLE_USER }}
        key: ${{ secrets.ORACLE_SSH_KEY }}
        script: |
          echo "========================================="
          echo "🚀 Starting Auto Deployment..."
          echo "=========================================""
          
          # 1. 프로젝트 디렉토리로 이동
          cd /home/ubuntu/bit_auto_v2
          
          # 2. 현재 실행 중인 프로세스 중지
          echo "Stopping existing processes..."
          pkill -f integrated_trading_system.py || true
          pkill -f multi_coin_trading.py || true
          pkill -f quantum_trading.py || true
          pkill -f feedback_scheduler.py || true
          sleep 2
          
          # 3. 최신 코드 가져오기
          echo "Pulling latest code from GitHub..."
          git fetch origin
          git reset --hard origin/main
          
          # 4. 가상환경 활성화 및 의존성 설치
          echo "Installing dependencies..."
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          source venv/bin/activate
          pip install --upgrade pip
          pip install pyupbit pandas numpy redis apscheduler httpx psutil pyyaml flask flask-cors python-dotenv
          
          # 5. 데이터베이스 초기화
          echo "Initializing databases..."
          python3 << 'EOF'
          import sqlite3
          import os
          
          os.makedirs('data', exist_ok=True)
          
          # quantum.db
          conn = sqlite3.connect('data/quantum.db')
          cursor = conn.cursor()
          cursor.execute('''CREATE TABLE IF NOT EXISTS trades (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
              strategy TEXT, symbol TEXT, side TEXT,
              price REAL, quantity REAL, fee REAL,
              pnl REAL, signal_strength REAL
          )''')
          conn.commit()
          conn.close()
          
          # ai_analysis.db
          conn = sqlite3.connect('data/ai_analysis.db')
          cursor = conn.cursor()
          cursor.execute('''CREATE TABLE IF NOT EXISTS analyses (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
              type TEXT, analysis TEXT,
              implemented BOOLEAN DEFAULT FALSE
          )''')
          conn.commit()
          conn.close()
          
          # multi_coin.db
          conn = sqlite3.connect('data/multi_coin.db')
          cursor = conn.cursor()
          cursor.execute('''CREATE TABLE IF NOT EXISTS trades (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
              coin TEXT, strategy TEXT, side TEXT,
              price REAL, quantity REAL, amount REAL,
              fee REAL, pnl REAL, signal_strength REAL,
              market_conditions TEXT
          )''')
          cursor.execute('''CREATE TABLE IF NOT EXISTS positions (
              coin TEXT PRIMARY KEY, quantity REAL,
              avg_price REAL, current_value REAL,
              unrealized_pnl REAL, last_updated DATETIME
          )''')
          conn.commit()
          conn.close()
          print("✓ Databases initialized")
          EOF
          
          # 6. 시스템 재시작
          echo "Starting integrated trading system..."
          source venv/bin/activate
          nohup python integrated_trading_system.py > logs/integrated_system.log 2>&1 &
          INTEGRATED_PID=$!
          echo $INTEGRATED_PID > integrated_system.pid
          echo "Started integrated_trading_system with PID: $INTEGRATED_PID"
          
          # 7. 대시보드가 실행 중이 아니면 시작
          if ! pgrep -f dashboard.py > /dev/null; then
            echo "Starting dashboard..."
            nohup python dashboard.py > logs/dashboard.log 2>&1 &
            echo $! > dashboard.pid
          fi
          
          # 8. 헬스 체크
          sleep 5
          if pgrep -f integrated_trading_system.py > /dev/null; then
            echo "✅ Trading system is running"
          else
            echo "❌ Trading system failed to start"
            exit 1
          fi
          
          if curl -f http://localhost:8080/ > /dev/null 2>&1; then
            echo "✅ Dashboard is accessible"
          else
            echo "⚠️ Dashboard may still be starting..."
          fi
          
          echo "========================================="
          echo "✅ Deployment completed successfully!"
          echo "========================================="
    
    - name: Verify Deployment
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.ORACLE_HOST }}
        username: ${{ secrets.ORACLE_USER }}
        key: ${{ secrets.ORACLE_SSH_KEY }}
        script: |
          ps aux | grep python | grep -v grep
          curl -I http://localhost:8080/ || true