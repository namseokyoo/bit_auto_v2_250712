---
alwaysApply: true
description: 안전한 SSH 원격 명령/스크립트 실행 패턴과 따옴표 오류 방지 규칙
---
# Safe SSH Remote Execution Patterns

원격 서버 점검/운영 시 따옴표 꼬임과 `dquote>` 같은 중단을 방지하기 위한 안전 패턴입니다.

## 공통 규칙
- 원격에서 항상 `set -euo pipefail` 사용 (실패 시 즉시 종료, 미정의 변수 금지, 파이프 실패 전파)
- SSH 옵션 고정: `-o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=10`
- JSON/파이썬 멀티라인은 반드시 single-quoted heredoc 사용: `<<'JSON'`, `<<'PY'` (로컬 셸/원격 셸 모두 확장 차단)
- sudo가 필요한 작업은 비대화형 불가. 운영 시에는 NOPASSWD 설정 또는 사용자 서비스/권한으로 대체
- pager 회피: 상태 확인은 항상 `| cat` 또는 `--no-pager`

## 패턴 1: Heredoc 원격 실행 (권장)
```bash
SSH_KEY="/absolute/path/to/key"
HOST="ubuntu@SERVER_IP"

ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=10 \
  "$HOST" bash -lc "cat >/tmp/check.sh && bash /tmp/check.sh" <<'REMOTE'
set -euo pipefail
cd /opt/bitcoin_auto_trading || { echo "missing project"; exit 1; }

printf "=== HEALTH ===\n"
curl -sS --max-time 10 http://127.0.0.1:9000/health | cat || true

printf "\n=== STATUS ===\n"
curl -sS --max-time 10 http://127.0.0.1:9000/api/system/status | cat || true

printf "\n=== TRADES COUNT ===\n"
python3 - <<'PY'
import sqlite3, os
path='data/trading_data.db'
print('db_path:', os.path.abspath(path))
conn=sqlite3.connect(path)
print('trades:', conn.execute('select count(*) from trades').fetchone()[0])
conn.close()
PY
REMOTE
```

## 패턴 2: 스크립트 전송(scp) 후 실행
```bash
scp -i "$SSH_KEY" -o StrictHostKeyChecking=no -o BatchMode=yes scripts/remote_check.sh "$HOST":/tmp/
ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -o BatchMode=yes "$HOST" "bash /tmp/remote_check.sh"
```

## 패턴 3: Base64로 안전 전송 (특수문자 많은 경우)
```bash
cat scripts/remote_check.sh | base64 | \
ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -o BatchMode=yes "$HOST" \
  'base64 -d >/tmp/remote_check.sh && bash /tmp/remote_check.sh'
```

## sudo가 필요한 경우의 원칙
- 비대화형 세션에서는 비밀번호 입력이 불가하므로 실패합니다.
- 대안: (1) 운영팀이 NOPASSWD 설정, (2) 사용자 단위 서비스(systemd --user), (3) 재로드 없이 앱 레벨 핫리로드 구현.

## 빠른 점검 템플릿
```bash
HOST="http://158.180.82.112:8080"
curl -sS --max-time 10 "$HOST/health" | cat
curl -sS --max-time 10 "$HOST/api/system/status" | cat
curl -sS --max-time 10 "$HOST/api/trades?days=1" | cat
```

