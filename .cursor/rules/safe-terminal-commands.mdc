---
alwaysApply: true
description: 터미널 명령 실행 시 안전하고 효율적인 패턴 모음
---

# Safe Terminal Command Patterns

터미널 명령이 멈추거나 오래 걸리는 것을 방지하기 위한 안전한 실행 패턴입니다.

## 기본 안전 설정
```bash
# 항상 사용할 기본 설정
set -euo pipefail  # 실패 시 즉시 종료, 미정의 변수 금지, 파이프 실패 전파
```

## 타임아웃 적용
```bash
# 일반 명령에 타임아웃 (Linux/macOS)
timeout 30 your_command || echo "Command timed out"

# macOS에서는 gtimeout 사용 (brew install coreutils)
gtimeout 30 your_command || echo "Command timed out"

# 대안: background + kill 방식
your_command &
PID=$!
sleep 30 && kill $PID 2>/dev/null &
wait $PID 2>/dev/null || echo "Command timed out or failed"
```

## SSH 명령 최적화
```bash
# 안전한 SSH 옵션
SSH_OPTS="-o ConnectTimeout=10 -o ServerAliveInterval=5 -o ServerAliveCountMax=2 -o BatchMode=yes -o StrictHostKeyChecking=no"

# 사용 예시
ssh $SSH_OPTS user@host "your_remote_command"
```

## Git 명령 최적화
```bash
# Git 명령에 타임아웃 적용
git config --global http.lowSpeedLimit 1000
git config --global http.lowSpeedTime 10

# 비대화형 모드
export GIT_TERMINAL_PROMPT=0
```

## 파일 다운로드/업로드
```bash
# curl with timeout
curl --max-time 30 --connect-timeout 10 -fsSL url

# wget with timeout  
wget --timeout=30 --tries=2 url

# scp with timeout
scp -o ConnectTimeout=10 file user@host:/path/
```

## 패키지 관리
```bash
# apt/yum 비대화형
export DEBIAN_FRONTEND=noninteractive
apt-get install -y package

# npm/yarn timeout
npm install --timeout=60000
yarn install --network-timeout 60000
```

## 로그 및 출력 제어
```bash
# 출력 제한으로 속도 향상
your_command | head -n 100
your_command 2>/dev/null | cat  # 에러 숨기고 pager 방지

# 진행 상황 표시
your_command &
PID=$!
while kill -0 $PID 2>/dev/null; do
    echo -n "."
    sleep 1
done
echo " Done"
```

## Docker 명령 최적화
```bash
# Docker 빌드에 타임아웃
docker build --timeout 600 .

# Container 실행에 타임아웃
docker run --timeout 30 image_name
```

## 파일 시스템 작업
```bash
# 큰 파일 복사 시 진행률 표시
rsync -avh --progress source/ dest/

# find 명령에 제한
find /path -name "*.log" -mtime +7 -exec rm {} \; 2>/dev/null || true
```

## 네트워크 테스트
```bash
# ping with timeout
ping -c 4 -W 5 host

# port check with timeout
nc -z -w5 host port && echo "Port open" || echo "Port closed"
```

## 실행 결과 검증
```bash
# 명령 성공 여부 확인
if timeout 30 your_command; then
    echo "Success"
else
    echo "Failed or timed out"
fi

# 여러 명령 순차 실행 (하나 실패 시 중단)
timeout 10 cmd1 && timeout 10 cmd2 && timeout 10 cmd3
```