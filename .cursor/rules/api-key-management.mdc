---
alwaysApply: true
description: API 키 관리 및 백그라운드 실행 가이드라인
---

# API 키 관리 및 백그라운드 실행

## API 키 관리

### 저장 위치
- **서버**: `/home/ubuntu/bit_auto_v2/config/.env`
- **로컬**: `.env` (프로젝트 루트)

### 필수 변수
```bash
UPBIT_ACCESS_KEY=your_access_key_here
UPBIT_SECRET_KEY=your_secret_key_here
FLASK_SECRET_KEY=your_flask_secret_key_here
```

### 보안 규칙
- **절대 하드코딩 금지**: 코드에 API 키 직접 작성 금지
- **Git 커밋 금지**: `.env` 파일은 `.gitignore`에 포함
- **모의 거래 모드**: API 키 없으면 자동으로 모의투자 모드로 전환

## 백그라운드 실행

### 핵심 원칙
- **포어그라운드 실행 금지**: 터미널이 로그를 출력하며 대기하는 것 방지
- **즉시 프롬프트 반환**: SSH 세션이 즉시 종료되어야 함

### 권장 패턴
```bash
# ✅ 좋은 방법
ssh -i ssh-key-2025-07-14.key ubuntu@158.180.82.112 "cd /home/ubuntu/bit_auto_v2 && nohup gunicorn --bind 0.0.0.0:8080 --workers 2 web.app:app > logs/gunicorn.log 2>&1 & disown && echo '완료'"

# ❌ 피해야 할 방법
ssh -i ssh-key-2025-07-14.key ubuntu@158.180.82.112 "nohup gunicorn ... & && sleep 5 && ps aux | grep gunicorn"
```

### 핵심 요소
- `nohup`: 터미널 종료 시에도 프로세스 계속 실행
- `&`: 백그라운드에서 실행
- `disown`: 셸 작업 목록에서 프로세스 분리
- 로그 리다이렉션: `> logs/gunicorn.log 2>&1`

### 상태 확인
백그라운드 실행과 상태 확인을 별도 명령으로 분리:
```bash
# 실행
ssh -i ssh-key-2025-07-14.key ubuntu@158.180.82.112 "nohup gunicorn ... & disown && echo '완료'"

# 확인
ssh -i ssh-key-2025-07-14.key ubuntu@158.180.82.112 "ps aux | grep gunicorn | grep -v grep"
```